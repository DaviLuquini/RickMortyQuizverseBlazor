@*@page "/"*@
@using RickMortyApi.Shared.Models
@using System.Collections.Generic
@using System.Net.Http
@using Newtonsoft.Json
@using System.IO
@inject HttpClient client

<h1>Rick & Morty Characters</h1>


@if (characters is null)
{
    <p>@return1</p>
    <button type="button" class="btn btn-danger">Botão de Teste</button>
}

else if (characters.Results.Count == 0)
{
    <p>No characters found</p>
}

else
{
    <div class="row">
        @foreach (var character in characters.Results)
        {
            <div class="col mt-3">
                <div class="card">
                    <img src="@character.Image" class="card-img-top" alt="No image">

                    <div class="card-body">
                        <p class="card-text"><strong>@character.Name</strong></p>
                        <p class="card-text">@character.Origin.Name</p>
                        <p class="card-text">@character.Location.Name</p>
                    </div>
                </div>
            </div>
        }
    </div>
}


@code {
    public required Characters characters { get; set; }
    public string return1 { get; set; } = "oi";


    protected override Task OnInitializedAsync()
    {
        GetCharacters();
        return base.OnInitializedAsync();
    }

    private async void GetCharacters()
    {
        var response = await client.GetAsync("api/characters/all");

        if (response.IsSuccessStatusCode)
        {
            string responseBody = await response.Content.ReadAsStringAsync();

            var tempCharacters = JsonConvert.DeserializeObject<Characters>(responseBody);

            if (tempCharacters != null)
            {
                characters = tempCharacters;
                StateHasChanged();
            }
            else
            {
                throw new ArgumentNullException();
            }
        }
    }
}